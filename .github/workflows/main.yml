--- # ceedling project file for Windows

:release_build:
  :output: libhelium.lib

:defines:
  :test:
    - WOLFSSL_USER_SETTINGS
    - WOLFSSL_MIN_RSA_BITS=2048
    - WOLFSSL_MIN_ECC_BITS=256
    - HAVE_SECURE_RENEGOTIATION
  :test_preprocess:
    - WOLFSSL_USER_SETTINGS
    - WOLFSSL_MIN_RSA_BITS=2048
    - WOLFSSL_MIN_ECC_BITS=256
    - HAVE_SECURE_RENEGOTIATION
    #- USE_WINDOWS_API # avoids use of unistd.h
  :release:
    - WOLFSSL_USER_SETTINGS
    - WOLFSSL_MIN_RSA_BITS=2048
    - WOLFSSL_MIN_ECC_BITS=256
    - HAVE_SECURE_RENEGOTIATION

:libraries:
  :path_flag: /LIBPATH:${1}
  :flag: ${1}.lib
  :test:
    - ws2_32
    - advapi32

:cmock:
  :when_ptr: :compare_ptr # build/test/mocks/mock_ssl.c(57818): error C2066: cast to function type is illegal

:environment:
  - :path:
     # mingw installs a link.exe too, try and avoid it...
     - "#{ENV['VCToolsInstallDir']}bin\\\\Host#{ENV['Platform']}\\\\#{ENV['Platform']}"
     - "#{ENV['PATH']}"
  # Magic to override msvc project settings to use /MT instead of /MD, since -p:RuntimeLibrary=MultiThreaded doesn't work
  # http://answers.flyppdevportal.com/MVC/Post/Thread/1a6dd13c-9f5c-430b-88ba-518bfcca00b1?category=vcgeneral
  - _CL_: /MT

:dependencies:
  :libraries:
    - :name: liboqs
      :source_path: third_party/liboqs
      :artifact_path: third_party/liboqs/build
      :fetch:
        :method: :git
        :source: https://github.com/open-quantum-safe/liboqs
        :tag: 0.8.0
      :build:
        # Build the library only, do not use OpenSSL, Set algorithms to support WolfSSL's "WOLFSSL_P521_KYBER_LEVEL5", disable all other unnecessary algorithms.
        - "cmake -B build -DOQS_BUILD_ONLY_LIB=ON -DOQS_USE_OPENSSL=OFF -DOQS_MINIMAL_BUILD='KEM_kyber_512;KEM_kyber_768;KEM_kyber_1024;SIG_dilithium_2;SIG_dilithium_3;SIG_dilithium_5;SIG_falcon_512;SIG_falcon_1024' ."
        - "cmake --build build --config Release --target oqs --"
      :artifacts:
        :includes:
          - include
        :static_libraries:
          - lib/Release/oqs.lib
    - :name: WolfSSL
      :source_path: third_party/wolfssl
      :fetch:
        :method: :git
        :source: https://github.com/wolfSSL/wolfssl.git
        :tag: v5.6.3-stable
      :build:
        - git apply ../../wolfssl/0001-DoHelloVerifyRequest-only-do-DTLS-1.3-version-check.patch
        - git apply ../../wolfssl/0002-DTLS-1.3-move-state-machine-forward-when-HVR-receive.patch
        - git apply ../../wolfssl/0003-DtlsShouldDrop-don-t-ignore-app-data-sent-before-a-S.patch
        - git apply ../../wolfssl/0004-Dtls13GetRnMask-Correctly-get-chacha-counter-on-BE-s.patch
        - git apply ../../wolfssl/1000-Guard-away-properly-don-t-build-sphincs-code.patch
        - git apply ../../wolfssl/1001-Allow-easily-disabling-of-SPHINCS.patch
        - git apply ../../wolfssl/2000-Rename-utils.c-to-utils.h.patch
        - git apply ../../wolfssl/2001-Merge-pull-request-6700-from-julek-wolfssl-dtls13-do.patch
        - "cp ../../windows/wolfssl-user_settings-64.h wolfssl/user_settings.h"
        - "cp -f ../../windows/wolfssl-user_settings-64.h IDE/WIN/user_settings.h"
        - "cp -f ../../windows/wolfssl.vcxproj ./wolfssl.vcxproj"
        - "MSBuild.exe wolfssl.vcxproj -verbosity:detailed -t:Build -p:Configuration=Release -p:Platform=x64 -p:PlatformToolset=v143"
      :artifacts:
        :includes:
          - /
          - /wolfssl # needed e.g. for mock_ssl.h to find wolfssl/ssl.h
        :static_libraries:
          - Release/x64/wolfssl.lib

:tools_test_file_preprocessor:
  :arguments:
    - /FI wolfssl/user_settings.h
    - /FI wolfssl/wolfcrypt/settings.h
:tools_test_includes_preprocessor: # using gcc
  :arguments:
    - -include third_party/wolfssl/wolfssl/user_settings.h
    - -include third_party/wolfssl/wolfssl/wolfcrypt/settings.h

# https://github.com/ThrowTheSwitch/Ceedling/issues/210 -> https://github.com/ThrowTheSwitch/Ceedling/files/1360977/project.txt
:tools:
# Ceedling defaults to using gcc for compiling, linking, etc.
# As [:tools] is blank, gcc will be used (so long as it's in your system path)
# See documentation to configure a given toolchain for use
  :test_compiler:
     :executable: cl
     :name: 'msvc'
     :arguments:
        - /c
        - /nologo
        - /MT
        - /GL
        - /I"$": COLLECTION_PATHS_TEST_SUPPORT_SOURCE_INCLUDE_VENDOR
        - /I"$": COLLECTION_PATHS_TEST_TOOLCHAIN_INCLUDE
        - /D"$": COLLECTION_DEFINES_TEST_AND_VENDOR
        - /Fo"${2}"
        - "${1}"
  :test_linker:
     :executable: link
     :name: 'msvc'
     :arguments:
        - /MACHINE:X64
        - "${1}"
        - /FORCE:MULTIPLE # /IGNORE:LNK4006 # mocks deliberately duplicate symbols
        - /LTCG
        - "${5}"
        - "${4}"
        - /OUT:"${2}"
  :test_file_preprocessor:
     :executable: cl
     :name: 'msvc'
     :arguments:
        - /P
        - /C
        - /I test_file_preprocessor
        - /I"$": COLLECTION_PATHS_TEST_SUPPORT_SOURCE_INCLUDE_VENDOR
        - /I"$": COLLECTION_PATHS_TEST_TOOLCHAIN_INCLUDE
        - /D"$": COLLECTION_DEFINES_TEST_AND_VENDOR
        - /D"$": DEFINES_TEST_PREPROCESS
        - /Fi"${2}"
        - "${1}"
  # This is `gcc -E -MM -MG` which outputs a make dependency rule.
  # Unsure how to coax cl.exe into doing this, so just stick with gcc.
  #:test_includes_preprocessor:
  #   :executable: cl
  #   :name: 'msvc'
  #   :arguments:
  #      - /P
  #      - /I"$": COLLECTION_PATHS_TEST_SUPPORT_SOURCE_INCLUDE_VENDOR
  #      - /I"$": COLLECTION_PATHS_TEST_TOOLCHAIN_INCLUDE
  #      - /D"$": COLLECTION_DEFINES_TEST_AND_VENDOR
  #      - /D"$": DEFINES_TEST_PREPROCESS
  #      - "${1}"
  :release_compiler:
     :executable: cl
     :name: 'msvc'
     :arguments:
        - /c
        - /MT
        - /I"$": COLLECTION_PATHS_SOURCE_INCLUDE_VENDOR
        - /I"$": COLLECTION_PATHS_RELEASE_TOOLCHAIN_INCLUDE
        - /D"$": COLLECTION_DEFINES_RELEASE_AND_VENDOR
        - /Fo"${2}"
        - "${1}"
  :release_linker:
     #:executable: link
     :executable: lib
     :name: 'msvc'
     :arguments:
        - /MACHINE:X64
        - "${1}"
        - /OUT:"${2}"

...
